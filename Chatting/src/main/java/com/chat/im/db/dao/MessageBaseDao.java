package com.chat.im.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.chat.im.db.bean.message.MessageBase;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_BASE".
*/
public class MessageBaseDao extends AbstractDao<MessageBase, String> {

    public static final String TABLENAME = "MESSAGE_BASE";

    /**
     * Properties of entity MessageBase.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MessageId = new Property(0, String.class, "messageId", true, "MESSAGE_ID");
        public final static Property MessageFrom = new Property(1, long.class, "messageFrom", false, "MESSAGE_FROM");
        public final static Property MessageTo = new Property(2, long.class, "messageTo", false, "MESSAGE_TO");
        public final static Property MessageDirection = new Property(3, int.class, "messageDirection", false, "MESSAGE_DIRECTION");
        public final static Property MessageContentType = new Property(4, int.class, "messageContentType", false, "MESSAGE_CONTENT_TYPE");
        public final static Property MessageContent = new Property(5, String.class, "messageContent", false, "MESSAGE_CONTENT");
        public final static Property MessageStatus = new Property(6, int.class, "messageStatus", false, "MESSAGE_STATUS");
        public final static Property AttachMessageContent = new Property(7, String.class, "attachMessageContent", false, "ATTACH_MESSAGE_CONTENT");
    }


    public MessageBaseDao(DaoConfig config) {
        super(config);
    }
    
    public MessageBaseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_BASE\" (" + //
                "\"MESSAGE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: messageId
                "\"MESSAGE_FROM\" INTEGER NOT NULL ," + // 1: messageFrom
                "\"MESSAGE_TO\" INTEGER NOT NULL ," + // 2: messageTo
                "\"MESSAGE_DIRECTION\" INTEGER NOT NULL ," + // 3: messageDirection
                "\"MESSAGE_CONTENT_TYPE\" INTEGER NOT NULL ," + // 4: messageContentType
                "\"MESSAGE_CONTENT\" TEXT," + // 5: messageContent
                "\"MESSAGE_STATUS\" INTEGER NOT NULL ," + // 6: messageStatus
                "\"ATTACH_MESSAGE_CONTENT\" TEXT);"); // 7: attachMessageContent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_BASE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageBase entity) {
        stmt.clearBindings();
 
        String messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindString(1, messageId);
        }
        stmt.bindLong(2, entity.getMessageFrom());
        stmt.bindLong(3, entity.getMessageTo());
        stmt.bindLong(4, entity.getMessageDirection());
        stmt.bindLong(5, entity.getMessageContentType());
 
        String messageContent = entity.getMessageContent();
        if (messageContent != null) {
            stmt.bindString(6, messageContent);
        }
        stmt.bindLong(7, entity.getMessageStatus());
 
        String attachMessageContent = entity.getAttachMessageContent();
        if (attachMessageContent != null) {
            stmt.bindString(8, attachMessageContent);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageBase entity) {
        stmt.clearBindings();
 
        String messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindString(1, messageId);
        }
        stmt.bindLong(2, entity.getMessageFrom());
        stmt.bindLong(3, entity.getMessageTo());
        stmt.bindLong(4, entity.getMessageDirection());
        stmt.bindLong(5, entity.getMessageContentType());
 
        String messageContent = entity.getMessageContent();
        if (messageContent != null) {
            stmt.bindString(6, messageContent);
        }
        stmt.bindLong(7, entity.getMessageStatus());
 
        String attachMessageContent = entity.getAttachMessageContent();
        if (attachMessageContent != null) {
            stmt.bindString(8, attachMessageContent);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public MessageBase readEntity(Cursor cursor, int offset) {
        MessageBase entity = new MessageBase( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // messageId
            cursor.getLong(offset + 1), // messageFrom
            cursor.getLong(offset + 2), // messageTo
            cursor.getInt(offset + 3), // messageDirection
            cursor.getInt(offset + 4), // messageContentType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // messageContent
            cursor.getInt(offset + 6), // messageStatus
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // attachMessageContent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageBase entity, int offset) {
        entity.setMessageId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMessageFrom(cursor.getLong(offset + 1));
        entity.setMessageTo(cursor.getLong(offset + 2));
        entity.setMessageDirection(cursor.getInt(offset + 3));
        entity.setMessageContentType(cursor.getInt(offset + 4));
        entity.setMessageContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMessageStatus(cursor.getInt(offset + 6));
        entity.setAttachMessageContent(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(MessageBase entity, long rowId) {
        return entity.getMessageId();
    }
    
    @Override
    public String getKey(MessageBase entity) {
        if(entity != null) {
            return entity.getMessageId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageBase entity) {
        return entity.getMessageId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
