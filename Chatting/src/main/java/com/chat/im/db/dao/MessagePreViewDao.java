package com.chat.im.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.chat.im.db.bean.MessagePreView;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_PRE_VIEW".
*/
public class MessagePreViewDao extends AbstractDao<MessagePreView, Void> {

    public static final String TABLENAME = "MESSAGE_PRE_VIEW";

    /**
     * Properties of entity MessagePreView.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserNickName = new Property(0, String.class, "userNickName", false, "USER_NICK_NAME");
        public final static Property ContentPreView = new Property(1, String.class, "contentPreView", false, "CONTENT_PRE_VIEW");
        public final static Property IsTop = new Property(2, boolean.class, "isTop", false, "IS_TOP");
    }


    public MessagePreViewDao(DaoConfig config) {
        super(config);
    }
    
    public MessagePreViewDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_PRE_VIEW\" (" + //
                "\"USER_NICK_NAME\" TEXT," + // 0: userNickName
                "\"CONTENT_PRE_VIEW\" TEXT," + // 1: contentPreView
                "\"IS_TOP\" INTEGER NOT NULL );"); // 2: isTop
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_PRE_VIEW\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessagePreView entity) {
        stmt.clearBindings();
 
        String userNickName = entity.getUserNickName();
        if (userNickName != null) {
            stmt.bindString(1, userNickName);
        }
 
        String contentPreView = entity.getContentPreView();
        if (contentPreView != null) {
            stmt.bindString(2, contentPreView);
        }
        stmt.bindLong(3, entity.getIsTop() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessagePreView entity) {
        stmt.clearBindings();
 
        String userNickName = entity.getUserNickName();
        if (userNickName != null) {
            stmt.bindString(1, userNickName);
        }
 
        String contentPreView = entity.getContentPreView();
        if (contentPreView != null) {
            stmt.bindString(2, contentPreView);
        }
        stmt.bindLong(3, entity.getIsTop() ? 1L: 0L);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MessagePreView readEntity(Cursor cursor, int offset) {
        MessagePreView entity = new MessagePreView( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userNickName
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // contentPreView
            cursor.getShort(offset + 2) != 0 // isTop
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessagePreView entity, int offset) {
        entity.setUserNickName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setContentPreView(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsTop(cursor.getShort(offset + 2) != 0);
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MessagePreView entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MessagePreView entity) {
        return null;
    }

    @Override
    public boolean hasKey(MessagePreView entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
